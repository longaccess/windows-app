/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace ThriftInterface
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Signature : TBase
  {
    private string _ArchiveID;
    private DateInfo _DateCreated;
    private string _UploaderName;
    private string _UploaderEmail;

    public string ArchiveID
    {
      get
      {
        return _ArchiveID;
      }
      set
      {
        __isset.ArchiveID = true;
        this._ArchiveID = value;
      }
    }

    public DateInfo DateCreated
    {
      get
      {
        return _DateCreated;
      }
      set
      {
        __isset.DateCreated = true;
        this._DateCreated = value;
      }
    }

    public string UploaderName
    {
      get
      {
        return _UploaderName;
      }
      set
      {
        __isset.UploaderName = true;
        this._UploaderName = value;
      }
    }

    public string UploaderEmail
    {
      get
      {
        return _UploaderEmail;
      }
      set
      {
        __isset.UploaderEmail = true;
        this._UploaderEmail = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ArchiveID;
      public bool DateCreated;
      public bool UploaderName;
      public bool UploaderEmail;
    }

    public Signature() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              ArchiveID = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              DateCreated = new DateInfo();
              DateCreated.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              UploaderName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              UploaderEmail = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Signature");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (ArchiveID != null && __isset.ArchiveID) {
        field.Name = "ArchiveID";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ArchiveID);
        oprot.WriteFieldEnd();
      }
      if (DateCreated != null && __isset.DateCreated) {
        field.Name = "DateCreated";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        DateCreated.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (UploaderName != null && __isset.UploaderName) {
        field.Name = "UploaderName";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UploaderName);
        oprot.WriteFieldEnd();
      }
      if (UploaderEmail != null && __isset.UploaderEmail) {
        field.Name = "UploaderEmail";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UploaderEmail);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Signature(");
      sb.Append("ArchiveID: ");
      sb.Append(ArchiveID);
      sb.Append(",DateCreated: ");
      sb.Append(DateCreated== null ? "<null>" : DateCreated.ToString());
      sb.Append(",UploaderName: ");
      sb.Append(UploaderName);
      sb.Append(",UploaderEmail: ");
      sb.Append(UploaderEmail);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
