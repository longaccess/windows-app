/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace ThriftInterface
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TransferStatus : TBase
  {
    private string _StatusDescription;
    private string _ETA;
    private long _RemainingBytes;
    private double _Progress;

    public string StatusDescription
    {
      get
      {
        return _StatusDescription;
      }
      set
      {
        __isset.StatusDescription = true;
        this._StatusDescription = value;
      }
    }

    public string ETA
    {
      get
      {
        return _ETA;
      }
      set
      {
        __isset.ETA = true;
        this._ETA = value;
      }
    }

    public long RemainingBytes
    {
      get
      {
        return _RemainingBytes;
      }
      set
      {
        __isset.RemainingBytes = true;
        this._RemainingBytes = value;
      }
    }

    public double Progress
    {
      get
      {
        return _Progress;
      }
      set
      {
        __isset.Progress = true;
        this._Progress = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool StatusDescription;
      public bool ETA;
      public bool RemainingBytes;
      public bool Progress;
    }

    public TransferStatus() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              StatusDescription = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              ETA = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              RemainingBytes = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Double) {
              Progress = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("TransferStatus");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (StatusDescription != null && __isset.StatusDescription) {
        field.Name = "StatusDescription";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(StatusDescription);
        oprot.WriteFieldEnd();
      }
      if (ETA != null && __isset.ETA) {
        field.Name = "ETA";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ETA);
        oprot.WriteFieldEnd();
      }
      if (__isset.RemainingBytes) {
        field.Name = "RemainingBytes";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(RemainingBytes);
        oprot.WriteFieldEnd();
      }
      if (__isset.Progress) {
        field.Name = "Progress";
        field.Type = TType.Double;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Progress);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("TransferStatus(");
      sb.Append("StatusDescription: ");
      sb.Append(StatusDescription);
      sb.Append(",ETA: ");
      sb.Append(ETA);
      sb.Append(",RemainingBytes: ");
      sb.Append(RemainingBytes);
      sb.Append(",Progress: ");
      sb.Append(Progress);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
