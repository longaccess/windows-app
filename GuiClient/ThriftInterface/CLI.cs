/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace ThriftInterface
{
  public partial class CLI {
    public interface Iface {
      bool PingCLI();
      #if SILVERLIGHT
      IAsyncResult Begin_PingCLI(AsyncCallback callback, object state, );
      bool End_PingCLI(IAsyncResult asyncResult);
      #endif
      void CloseWhenPossible();
      #if SILVERLIGHT
      IAsyncResult Begin_CloseWhenPossible(AsyncCallback callback, object state, );
      void End_CloseWhenPossible(IAsyncResult asyncResult);
      #endif
      bool LoginUser(string username, string Pass, bool Remember);
      #if SILVERLIGHT
      IAsyncResult Begin_LoginUser(AsyncCallback callback, object state, string username, string Pass, bool Remember);
      bool End_LoginUser(IAsyncResult asyncResult);
      #endif
      bool UserIsLoggedIn();
      #if SILVERLIGHT
      IAsyncResult Begin_UserIsLoggedIn(AsyncCallback callback, object state, );
      bool End_UserIsLoggedIn(IAsyncResult asyncResult);
      #endif
      bool Logout();
      #if SILVERLIGHT
      IAsyncResult Begin_Logout(AsyncCallback callback, object state, );
      bool End_Logout(IAsyncResult asyncResult);
      #endif
      List<Capsule> GetCapsules();
      #if SILVERLIGHT
      IAsyncResult Begin_GetCapsules(AsyncCallback callback, object state, );
      List<Capsule> End_GetCapsules(IAsyncResult asyncResult);
      #endif
      Archive CreateArchive(List<string> filePaths);
      #if SILVERLIGHT
      IAsyncResult Begin_CreateArchive(AsyncCallback callback, object state, List<string> filePaths);
      Archive End_CreateArchive(IAsyncResult asyncResult);
      #endif
      List<Archive> GetUploads();
      #if SILVERLIGHT
      IAsyncResult Begin_GetUploads(AsyncCallback callback, object state, );
      List<Archive> End_GetUploads(IAsyncResult asyncResult);
      #endif
      void UploadToCapsule(string ArchiveLocalID, string CapsuleID, string title, string description);
      #if SILVERLIGHT
      IAsyncResult Begin_UploadToCapsule(AsyncCallback callback, object state, string ArchiveLocalID, string CapsuleID, string title, string description);
      void End_UploadToCapsule(IAsyncResult asyncResult);
      #endif
      void ResumeUpload(string ArchiveLocalID);
      #if SILVERLIGHT
      IAsyncResult Begin_ResumeUpload(AsyncCallback callback, object state, string ArchiveLocalID);
      void End_ResumeUpload(IAsyncResult asyncResult);
      #endif
      TransferStatus QueryArchiveStatus(string ArchiveLocalID);
      #if SILVERLIGHT
      IAsyncResult Begin_QueryArchiveStatus(AsyncCallback callback, object state, string ArchiveLocalID);
      TransferStatus End_QueryArchiveStatus(IAsyncResult asyncResult);
      #endif
      void PauseUpload(string ArchiveLocalID);
      #if SILVERLIGHT
      IAsyncResult Begin_PauseUpload(AsyncCallback callback, object state, string ArchiveLocalID);
      void End_PauseUpload(IAsyncResult asyncResult);
      #endif
      void CancelUpload(string ArchiveLocalID);
      #if SILVERLIGHT
      IAsyncResult Begin_CancelUpload(AsyncCallback callback, object state, string ArchiveLocalID);
      void End_CancelUpload(IAsyncResult asyncResult);
      #endif
      List<Certificate> GetCertificates();
      #if SILVERLIGHT
      IAsyncResult Begin_GetCertificates(AsyncCallback callback, object state, );
      List<Certificate> End_GetCertificates(IAsyncResult asyncResult);
      #endif
      byte[] ExportCertificate(string ArchiveID, CertExportFormat format);
      #if SILVERLIGHT
      IAsyncResult Begin_ExportCertificate(AsyncCallback callback, object state, string ArchiveID, CertExportFormat format);
      byte[] End_ExportCertificate(IAsyncResult asyncResult);
      #endif
      void Decrypt(string archivePath, string key, string destinationPath);
      #if SILVERLIGHT
      IAsyncResult Begin_Decrypt(AsyncCallback callback, object state, string archivePath, string key, string destinationPath);
      void End_Decrypt(IAsyncResult asyncResult);
      #endif
      Settings GetSettings();
      #if SILVERLIGHT
      IAsyncResult Begin_GetSettings(AsyncCallback callback, object state, );
      Settings End_GetSettings(IAsyncResult asyncResult);
      #endif
      void SetSettings(Settings settings);
      #if SILVERLIGHT
      IAsyncResult Begin_SetSettings(AsyncCallback callback, object state, Settings settings);
      void End_SetSettings(IAsyncResult asyncResult);
      #endif
    }

    public class Client : Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      
      #if SILVERLIGHT
      public IAsyncResult Begin_PingCLI(AsyncCallback callback, object state, )
      {
        return send_PingCLI(callback, state);
      }

      public bool End_PingCLI(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PingCLI();
      }

      #endif

      public bool PingCLI()
      {
        #if !SILVERLIGHT
        send_PingCLI();
        return recv_PingCLI();

        #else
        var asyncResult = Begin_PingCLI(null, null, );
        return End_PingCLI(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PingCLI(AsyncCallback callback, object state, )
      #else
      public void send_PingCLI()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PingCLI", TMessageType.Call, seqid_));
        PingCLI_args args = new PingCLI_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_PingCLI()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PingCLI_result result = new PingCLI_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PingCLI failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_CloseWhenPossible(AsyncCallback callback, object state, )
      {
        return send_CloseWhenPossible(callback, state);
      }

      public void End_CloseWhenPossible(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_CloseWhenPossible();
      }

      #endif

      public void CloseWhenPossible()
      {
        #if !SILVERLIGHT
        send_CloseWhenPossible();
        recv_CloseWhenPossible();

        #else
        var asyncResult = Begin_CloseWhenPossible(null, null, );
        End_CloseWhenPossible(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_CloseWhenPossible(AsyncCallback callback, object state, )
      #else
      public void send_CloseWhenPossible()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("CloseWhenPossible", TMessageType.Call, seqid_));
        CloseWhenPossible_args args = new CloseWhenPossible_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_CloseWhenPossible()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        CloseWhenPossible_result result = new CloseWhenPossible_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_LoginUser(AsyncCallback callback, object state, string username, string Pass, bool Remember)
      {
        return send_LoginUser(callback, state, username, Pass, Remember);
      }

      public bool End_LoginUser(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_LoginUser();
      }

      #endif

      public bool LoginUser(string username, string Pass, bool Remember)
      {
        #if !SILVERLIGHT
        send_LoginUser(username, Pass, Remember);
        return recv_LoginUser();

        #else
        var asyncResult = Begin_LoginUser(null, null, username, Pass, Remember);
        return End_LoginUser(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_LoginUser(AsyncCallback callback, object state, string username, string Pass, bool Remember)
      #else
      public void send_LoginUser(string username, string Pass, bool Remember)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("LoginUser", TMessageType.Call, seqid_));
        LoginUser_args args = new LoginUser_args();
        args.Username = username;
        args.Pass = Pass;
        args.Remember = Remember;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_LoginUser()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        LoginUser_result result = new LoginUser_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error) {
          throw result.Error;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "LoginUser failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_UserIsLoggedIn(AsyncCallback callback, object state, )
      {
        return send_UserIsLoggedIn(callback, state);
      }

      public bool End_UserIsLoggedIn(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_UserIsLoggedIn();
      }

      #endif

      public bool UserIsLoggedIn()
      {
        #if !SILVERLIGHT
        send_UserIsLoggedIn();
        return recv_UserIsLoggedIn();

        #else
        var asyncResult = Begin_UserIsLoggedIn(null, null, );
        return End_UserIsLoggedIn(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_UserIsLoggedIn(AsyncCallback callback, object state, )
      #else
      public void send_UserIsLoggedIn()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("UserIsLoggedIn", TMessageType.Call, seqid_));
        UserIsLoggedIn_args args = new UserIsLoggedIn_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_UserIsLoggedIn()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        UserIsLoggedIn_result result = new UserIsLoggedIn_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UserIsLoggedIn failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Logout(AsyncCallback callback, object state, )
      {
        return send_Logout(callback, state);
      }

      public bool End_Logout(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Logout();
      }

      #endif

      public bool Logout()
      {
        #if !SILVERLIGHT
        send_Logout();
        return recv_Logout();

        #else
        var asyncResult = Begin_Logout(null, null, );
        return End_Logout(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Logout(AsyncCallback callback, object state, )
      #else
      public void send_Logout()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Logout", TMessageType.Call, seqid_));
        Logout_args args = new Logout_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_Logout()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Logout_result result = new Logout_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error) {
          throw result.Error;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Logout failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetCapsules(AsyncCallback callback, object state, )
      {
        return send_GetCapsules(callback, state);
      }

      public List<Capsule> End_GetCapsules(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetCapsules();
      }

      #endif

      public List<Capsule> GetCapsules()
      {
        #if !SILVERLIGHT
        send_GetCapsules();
        return recv_GetCapsules();

        #else
        var asyncResult = Begin_GetCapsules(null, null, );
        return End_GetCapsules(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetCapsules(AsyncCallback callback, object state, )
      #else
      public void send_GetCapsules()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetCapsules", TMessageType.Call, seqid_));
        GetCapsules_args args = new GetCapsules_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Capsule> recv_GetCapsules()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetCapsules_result result = new GetCapsules_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error) {
          throw result.Error;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetCapsules failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_CreateArchive(AsyncCallback callback, object state, List<string> filePaths)
      {
        return send_CreateArchive(callback, state, filePaths);
      }

      public Archive End_CreateArchive(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_CreateArchive();
      }

      #endif

      public Archive CreateArchive(List<string> filePaths)
      {
        #if !SILVERLIGHT
        send_CreateArchive(filePaths);
        return recv_CreateArchive();

        #else
        var asyncResult = Begin_CreateArchive(null, null, filePaths);
        return End_CreateArchive(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_CreateArchive(AsyncCallback callback, object state, List<string> filePaths)
      #else
      public void send_CreateArchive(List<string> filePaths)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("CreateArchive", TMessageType.Call, seqid_));
        CreateArchive_args args = new CreateArchive_args();
        args.FilePaths = filePaths;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Archive recv_CreateArchive()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        CreateArchive_result result = new CreateArchive_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error) {
          throw result.Error;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CreateArchive failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetUploads(AsyncCallback callback, object state, )
      {
        return send_GetUploads(callback, state);
      }

      public List<Archive> End_GetUploads(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetUploads();
      }

      #endif

      public List<Archive> GetUploads()
      {
        #if !SILVERLIGHT
        send_GetUploads();
        return recv_GetUploads();

        #else
        var asyncResult = Begin_GetUploads(null, null, );
        return End_GetUploads(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetUploads(AsyncCallback callback, object state, )
      #else
      public void send_GetUploads()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetUploads", TMessageType.Call, seqid_));
        GetUploads_args args = new GetUploads_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Archive> recv_GetUploads()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetUploads_result result = new GetUploads_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetUploads failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_UploadToCapsule(AsyncCallback callback, object state, string ArchiveLocalID, string CapsuleID, string title, string description)
      {
        return send_UploadToCapsule(callback, state, ArchiveLocalID, CapsuleID, title, description);
      }

      public void End_UploadToCapsule(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_UploadToCapsule();
      }

      #endif

      public void UploadToCapsule(string ArchiveLocalID, string CapsuleID, string title, string description)
      {
        #if !SILVERLIGHT
        send_UploadToCapsule(ArchiveLocalID, CapsuleID, title, description);
        recv_UploadToCapsule();

        #else
        var asyncResult = Begin_UploadToCapsule(null, null, ArchiveLocalID, CapsuleID, title, description);
        End_UploadToCapsule(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_UploadToCapsule(AsyncCallback callback, object state, string ArchiveLocalID, string CapsuleID, string title, string description)
      #else
      public void send_UploadToCapsule(string ArchiveLocalID, string CapsuleID, string title, string description)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("UploadToCapsule", TMessageType.Call, seqid_));
        UploadToCapsule_args args = new UploadToCapsule_args();
        args.ArchiveLocalID = ArchiveLocalID;
        args.CapsuleID = CapsuleID;
        args.Title = title;
        args.Description = description;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_UploadToCapsule()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        UploadToCapsule_result result = new UploadToCapsule_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.error) {
          throw result.Error;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ResumeUpload(AsyncCallback callback, object state, string ArchiveLocalID)
      {
        return send_ResumeUpload(callback, state, ArchiveLocalID);
      }

      public void End_ResumeUpload(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_ResumeUpload();
      }

      #endif

      public void ResumeUpload(string ArchiveLocalID)
      {
        #if !SILVERLIGHT
        send_ResumeUpload(ArchiveLocalID);
        recv_ResumeUpload();

        #else
        var asyncResult = Begin_ResumeUpload(null, null, ArchiveLocalID);
        End_ResumeUpload(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ResumeUpload(AsyncCallback callback, object state, string ArchiveLocalID)
      #else
      public void send_ResumeUpload(string ArchiveLocalID)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ResumeUpload", TMessageType.Call, seqid_));
        ResumeUpload_args args = new ResumeUpload_args();
        args.ArchiveLocalID = ArchiveLocalID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_ResumeUpload()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ResumeUpload_result result = new ResumeUpload_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.error) {
          throw result.Error;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_QueryArchiveStatus(AsyncCallback callback, object state, string ArchiveLocalID)
      {
        return send_QueryArchiveStatus(callback, state, ArchiveLocalID);
      }

      public TransferStatus End_QueryArchiveStatus(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_QueryArchiveStatus();
      }

      #endif

      public TransferStatus QueryArchiveStatus(string ArchiveLocalID)
      {
        #if !SILVERLIGHT
        send_QueryArchiveStatus(ArchiveLocalID);
        return recv_QueryArchiveStatus();

        #else
        var asyncResult = Begin_QueryArchiveStatus(null, null, ArchiveLocalID);
        return End_QueryArchiveStatus(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_QueryArchiveStatus(AsyncCallback callback, object state, string ArchiveLocalID)
      #else
      public void send_QueryArchiveStatus(string ArchiveLocalID)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("QueryArchiveStatus", TMessageType.Call, seqid_));
        QueryArchiveStatus_args args = new QueryArchiveStatus_args();
        args.ArchiveLocalID = ArchiveLocalID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TransferStatus recv_QueryArchiveStatus()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        QueryArchiveStatus_result result = new QueryArchiveStatus_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error) {
          throw result.Error;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryArchiveStatus failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PauseUpload(AsyncCallback callback, object state, string ArchiveLocalID)
      {
        return send_PauseUpload(callback, state, ArchiveLocalID);
      }

      public void End_PauseUpload(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_PauseUpload();
      }

      #endif

      public void PauseUpload(string ArchiveLocalID)
      {
        #if !SILVERLIGHT
        send_PauseUpload(ArchiveLocalID);
        recv_PauseUpload();

        #else
        var asyncResult = Begin_PauseUpload(null, null, ArchiveLocalID);
        End_PauseUpload(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PauseUpload(AsyncCallback callback, object state, string ArchiveLocalID)
      #else
      public void send_PauseUpload(string ArchiveLocalID)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PauseUpload", TMessageType.Call, seqid_));
        PauseUpload_args args = new PauseUpload_args();
        args.ArchiveLocalID = ArchiveLocalID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_PauseUpload()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PauseUpload_result result = new PauseUpload_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.error) {
          throw result.Error;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_CancelUpload(AsyncCallback callback, object state, string ArchiveLocalID)
      {
        return send_CancelUpload(callback, state, ArchiveLocalID);
      }

      public void End_CancelUpload(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_CancelUpload();
      }

      #endif

      public void CancelUpload(string ArchiveLocalID)
      {
        #if !SILVERLIGHT
        send_CancelUpload(ArchiveLocalID);
        recv_CancelUpload();

        #else
        var asyncResult = Begin_CancelUpload(null, null, ArchiveLocalID);
        End_CancelUpload(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_CancelUpload(AsyncCallback callback, object state, string ArchiveLocalID)
      #else
      public void send_CancelUpload(string ArchiveLocalID)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("CancelUpload", TMessageType.Call, seqid_));
        CancelUpload_args args = new CancelUpload_args();
        args.ArchiveLocalID = ArchiveLocalID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_CancelUpload()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        CancelUpload_result result = new CancelUpload_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.error) {
          throw result.Error;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetCertificates(AsyncCallback callback, object state, )
      {
        return send_GetCertificates(callback, state);
      }

      public List<Certificate> End_GetCertificates(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetCertificates();
      }

      #endif

      public List<Certificate> GetCertificates()
      {
        #if !SILVERLIGHT
        send_GetCertificates();
        return recv_GetCertificates();

        #else
        var asyncResult = Begin_GetCertificates(null, null, );
        return End_GetCertificates(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetCertificates(AsyncCallback callback, object state, )
      #else
      public void send_GetCertificates()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetCertificates", TMessageType.Call, seqid_));
        GetCertificates_args args = new GetCertificates_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Certificate> recv_GetCertificates()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetCertificates_result result = new GetCertificates_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetCertificates failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ExportCertificate(AsyncCallback callback, object state, string ArchiveID, CertExportFormat format)
      {
        return send_ExportCertificate(callback, state, ArchiveID, format);
      }

      public byte[] End_ExportCertificate(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ExportCertificate();
      }

      #endif

      public byte[] ExportCertificate(string ArchiveID, CertExportFormat format)
      {
        #if !SILVERLIGHT
        send_ExportCertificate(ArchiveID, format);
        return recv_ExportCertificate();

        #else
        var asyncResult = Begin_ExportCertificate(null, null, ArchiveID, format);
        return End_ExportCertificate(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ExportCertificate(AsyncCallback callback, object state, string ArchiveID, CertExportFormat format)
      #else
      public void send_ExportCertificate(string ArchiveID, CertExportFormat format)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ExportCertificate", TMessageType.Call, seqid_));
        ExportCertificate_args args = new ExportCertificate_args();
        args.ArchiveID = ArchiveID;
        args.Format = format;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_ExportCertificate()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ExportCertificate_result result = new ExportCertificate_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error) {
          throw result.Error;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ExportCertificate failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Decrypt(AsyncCallback callback, object state, string archivePath, string key, string destinationPath)
      {
        return send_Decrypt(callback, state, archivePath, key, destinationPath);
      }

      public void End_Decrypt(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_Decrypt();
      }

      #endif

      public void Decrypt(string archivePath, string key, string destinationPath)
      {
        #if !SILVERLIGHT
        send_Decrypt(archivePath, key, destinationPath);
        recv_Decrypt();

        #else
        var asyncResult = Begin_Decrypt(null, null, archivePath, key, destinationPath);
        End_Decrypt(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Decrypt(AsyncCallback callback, object state, string archivePath, string key, string destinationPath)
      #else
      public void send_Decrypt(string archivePath, string key, string destinationPath)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Decrypt", TMessageType.Call, seqid_));
        Decrypt_args args = new Decrypt_args();
        args.ArchivePath = archivePath;
        args.Key = key;
        args.DestinationPath = destinationPath;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_Decrypt()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Decrypt_result result = new Decrypt_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.error) {
          throw result.Error;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetSettings(AsyncCallback callback, object state, )
      {
        return send_GetSettings(callback, state);
      }

      public Settings End_GetSettings(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetSettings();
      }

      #endif

      public Settings GetSettings()
      {
        #if !SILVERLIGHT
        send_GetSettings();
        return recv_GetSettings();

        #else
        var asyncResult = Begin_GetSettings(null, null, );
        return End_GetSettings(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetSettings(AsyncCallback callback, object state, )
      #else
      public void send_GetSettings()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetSettings", TMessageType.Call, seqid_));
        GetSettings_args args = new GetSettings_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Settings recv_GetSettings()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetSettings_result result = new GetSettings_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetSettings failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SetSettings(AsyncCallback callback, object state, Settings settings)
      {
        return send_SetSettings(callback, state, settings);
      }

      public void End_SetSettings(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_SetSettings();
      }

      #endif

      public void SetSettings(Settings settings)
      {
        #if !SILVERLIGHT
        send_SetSettings(settings);
        recv_SetSettings();

        #else
        var asyncResult = Begin_SetSettings(null, null, settings);
        End_SetSettings(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SetSettings(AsyncCallback callback, object state, Settings settings)
      #else
      public void send_SetSettings(Settings settings)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SetSettings", TMessageType.Call, seqid_));
        SetSettings_args args = new SetSettings_args();
        args.Settings = settings;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_SetSettings()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetSettings_result result = new SetSettings_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["PingCLI"] = PingCLI_Process;
        processMap_["CloseWhenPossible"] = CloseWhenPossible_Process;
        processMap_["LoginUser"] = LoginUser_Process;
        processMap_["UserIsLoggedIn"] = UserIsLoggedIn_Process;
        processMap_["Logout"] = Logout_Process;
        processMap_["GetCapsules"] = GetCapsules_Process;
        processMap_["CreateArchive"] = CreateArchive_Process;
        processMap_["GetUploads"] = GetUploads_Process;
        processMap_["UploadToCapsule"] = UploadToCapsule_Process;
        processMap_["ResumeUpload"] = ResumeUpload_Process;
        processMap_["QueryArchiveStatus"] = QueryArchiveStatus_Process;
        processMap_["PauseUpload"] = PauseUpload_Process;
        processMap_["CancelUpload"] = CancelUpload_Process;
        processMap_["GetCertificates"] = GetCertificates_Process;
        processMap_["ExportCertificate"] = ExportCertificate_Process;
        processMap_["Decrypt"] = Decrypt_Process;
        processMap_["GetSettings"] = GetSettings_Process;
        processMap_["SetSettings"] = SetSettings_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void PingCLI_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PingCLI_args args = new PingCLI_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PingCLI_result result = new PingCLI_result();
        result.Success = iface_.PingCLI();
        oprot.WriteMessageBegin(new TMessage("PingCLI", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void CloseWhenPossible_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        CloseWhenPossible_args args = new CloseWhenPossible_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        CloseWhenPossible_result result = new CloseWhenPossible_result();
        iface_.CloseWhenPossible();
        oprot.WriteMessageBegin(new TMessage("CloseWhenPossible", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void LoginUser_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        LoginUser_args args = new LoginUser_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        LoginUser_result result = new LoginUser_result();
        try {
          result.Success = iface_.LoginUser(args.Username, args.Pass, args.Remember);
        } catch (InvalidOperation error) {
          result.Error = error;
        }
        oprot.WriteMessageBegin(new TMessage("LoginUser", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void UserIsLoggedIn_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        UserIsLoggedIn_args args = new UserIsLoggedIn_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        UserIsLoggedIn_result result = new UserIsLoggedIn_result();
        result.Success = iface_.UserIsLoggedIn();
        oprot.WriteMessageBegin(new TMessage("UserIsLoggedIn", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Logout_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Logout_args args = new Logout_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Logout_result result = new Logout_result();
        try {
          result.Success = iface_.Logout();
        } catch (InvalidOperation error) {
          result.Error = error;
        }
        oprot.WriteMessageBegin(new TMessage("Logout", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetCapsules_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetCapsules_args args = new GetCapsules_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetCapsules_result result = new GetCapsules_result();
        try {
          result.Success = iface_.GetCapsules();
        } catch (InvalidOperation error) {
          result.Error = error;
        }
        oprot.WriteMessageBegin(new TMessage("GetCapsules", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void CreateArchive_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        CreateArchive_args args = new CreateArchive_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        CreateArchive_result result = new CreateArchive_result();
        try {
          result.Success = iface_.CreateArchive(args.FilePaths);
        } catch (InvalidOperation error) {
          result.Error = error;
        }
        oprot.WriteMessageBegin(new TMessage("CreateArchive", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetUploads_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetUploads_args args = new GetUploads_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetUploads_result result = new GetUploads_result();
        result.Success = iface_.GetUploads();
        oprot.WriteMessageBegin(new TMessage("GetUploads", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void UploadToCapsule_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        UploadToCapsule_args args = new UploadToCapsule_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        UploadToCapsule_result result = new UploadToCapsule_result();
        try {
          iface_.UploadToCapsule(args.ArchiveLocalID, args.CapsuleID, args.Title, args.Description);
        } catch (InvalidOperation error) {
          result.Error = error;
        }
        oprot.WriteMessageBegin(new TMessage("UploadToCapsule", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ResumeUpload_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ResumeUpload_args args = new ResumeUpload_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ResumeUpload_result result = new ResumeUpload_result();
        try {
          iface_.ResumeUpload(args.ArchiveLocalID);
        } catch (InvalidOperation error) {
          result.Error = error;
        }
        oprot.WriteMessageBegin(new TMessage("ResumeUpload", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void QueryArchiveStatus_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        QueryArchiveStatus_args args = new QueryArchiveStatus_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        QueryArchiveStatus_result result = new QueryArchiveStatus_result();
        try {
          result.Success = iface_.QueryArchiveStatus(args.ArchiveLocalID);
        } catch (InvalidOperation error) {
          result.Error = error;
        }
        oprot.WriteMessageBegin(new TMessage("QueryArchiveStatus", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PauseUpload_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PauseUpload_args args = new PauseUpload_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PauseUpload_result result = new PauseUpload_result();
        try {
          iface_.PauseUpload(args.ArchiveLocalID);
        } catch (InvalidOperation error) {
          result.Error = error;
        }
        oprot.WriteMessageBegin(new TMessage("PauseUpload", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void CancelUpload_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        CancelUpload_args args = new CancelUpload_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        CancelUpload_result result = new CancelUpload_result();
        try {
          iface_.CancelUpload(args.ArchiveLocalID);
        } catch (InvalidOperation error) {
          result.Error = error;
        }
        oprot.WriteMessageBegin(new TMessage("CancelUpload", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetCertificates_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetCertificates_args args = new GetCertificates_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetCertificates_result result = new GetCertificates_result();
        result.Success = iface_.GetCertificates();
        oprot.WriteMessageBegin(new TMessage("GetCertificates", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ExportCertificate_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ExportCertificate_args args = new ExportCertificate_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ExportCertificate_result result = new ExportCertificate_result();
        try {
          result.Success = iface_.ExportCertificate(args.ArchiveID, args.Format);
        } catch (InvalidOperation error) {
          result.Error = error;
        }
        oprot.WriteMessageBegin(new TMessage("ExportCertificate", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Decrypt_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Decrypt_args args = new Decrypt_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Decrypt_result result = new Decrypt_result();
        try {
          iface_.Decrypt(args.ArchivePath, args.Key, args.DestinationPath);
        } catch (InvalidOperation error) {
          result.Error = error;
        }
        oprot.WriteMessageBegin(new TMessage("Decrypt", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetSettings_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetSettings_args args = new GetSettings_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetSettings_result result = new GetSettings_result();
        result.Success = iface_.GetSettings();
        oprot.WriteMessageBegin(new TMessage("GetSettings", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetSettings_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetSettings_args args = new SetSettings_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetSettings_result result = new SetSettings_result();
        iface_.SetSettings(args.Settings);
        oprot.WriteMessageBegin(new TMessage("SetSettings", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PingCLI_args : TBase
    {

      public PingCLI_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("PingCLI_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("PingCLI_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PingCLI_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PingCLI_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("PingCLI_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("PingCLI_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CloseWhenPossible_args : TBase
    {

      public CloseWhenPossible_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CloseWhenPossible_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("CloseWhenPossible_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CloseWhenPossible_result : TBase
    {

      public CloseWhenPossible_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CloseWhenPossible_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("CloseWhenPossible_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class LoginUser_args : TBase
    {
      private string _username;
      private string _Pass;
      private bool _Remember;

      public string Username
      {
        get
        {
          return _username;
        }
        set
        {
          __isset.username = true;
          this._username = value;
        }
      }

      public string Pass
      {
        get
        {
          return _Pass;
        }
        set
        {
          __isset.Pass = true;
          this._Pass = value;
        }
      }

      public bool Remember
      {
        get
        {
          return _Remember;
        }
        set
        {
          __isset.Remember = true;
          this._Remember = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool username;
        public bool Pass;
        public bool Remember;
      }

      public LoginUser_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Username = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Pass = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                Remember = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("LoginUser_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Username != null && __isset.username) {
          field.Name = "username";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Username);
          oprot.WriteFieldEnd();
        }
        if (Pass != null && __isset.Pass) {
          field.Name = "Pass";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Pass);
          oprot.WriteFieldEnd();
        }
        if (__isset.Remember) {
          field.Name = "Remember";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Remember);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("LoginUser_args(");
        sb.Append("Username: ");
        sb.Append(Username);
        sb.Append(",Pass: ");
        sb.Append(Pass);
        sb.Append(",Remember: ");
        sb.Append(Remember);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class LoginUser_result : TBase
    {
      private bool _success;
      private InvalidOperation _error;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public InvalidOperation Error
      {
        get
        {
          return _error;
        }
        set
        {
          __isset.error = true;
          this._error = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error;
      }

      public LoginUser_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Error = new InvalidOperation();
                Error.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("LoginUser_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.error) {
          if (Error != null) {
            field.Name = "Error";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Error.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("LoginUser_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Error: ");
        sb.Append(Error== null ? "<null>" : Error.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UserIsLoggedIn_args : TBase
    {

      public UserIsLoggedIn_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UserIsLoggedIn_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("UserIsLoggedIn_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UserIsLoggedIn_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public UserIsLoggedIn_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UserIsLoggedIn_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("UserIsLoggedIn_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Logout_args : TBase
    {

      public Logout_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Logout_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Logout_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Logout_result : TBase
    {
      private bool _success;
      private InvalidOperation _error;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public InvalidOperation Error
      {
        get
        {
          return _error;
        }
        set
        {
          __isset.error = true;
          this._error = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error;
      }

      public Logout_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Error = new InvalidOperation();
                Error.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Logout_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.error) {
          if (Error != null) {
            field.Name = "Error";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Error.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Logout_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Error: ");
        sb.Append(Error== null ? "<null>" : Error.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetCapsules_args : TBase
    {

      public GetCapsules_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetCapsules_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetCapsules_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetCapsules_result : TBase
    {
      private List<Capsule> _success;
      private InvalidOperation _error;

      public List<Capsule> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public InvalidOperation Error
      {
        get
        {
          return _error;
        }
        set
        {
          __isset.error = true;
          this._error = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error;
      }

      public GetCapsules_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Capsule>();
                  TList _list4 = iprot.ReadListBegin();
                  for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                  {
                    Capsule _elem6 = new Capsule();
                    _elem6 = new Capsule();
                    _elem6.Read(iprot);
                    Success.Add(_elem6);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Error = new InvalidOperation();
                Error.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetCapsules_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Capsule _iter7 in Success)
              {
                _iter7.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.error) {
          if (Error != null) {
            field.Name = "Error";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Error.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetCapsules_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Error: ");
        sb.Append(Error== null ? "<null>" : Error.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CreateArchive_args : TBase
    {
      private List<string> _filePaths;

      public List<string> FilePaths
      {
        get
        {
          return _filePaths;
        }
        set
        {
          __isset.filePaths = true;
          this._filePaths = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool filePaths;
      }

      public CreateArchive_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  FilePaths = new List<string>();
                  TList _list8 = iprot.ReadListBegin();
                  for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                  {
                    string _elem10 = null;
                    _elem10 = iprot.ReadString();
                    FilePaths.Add(_elem10);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CreateArchive_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (FilePaths != null && __isset.filePaths) {
          field.Name = "filePaths";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, FilePaths.Count));
            foreach (string _iter11 in FilePaths)
            {
              oprot.WriteString(_iter11);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("CreateArchive_args(");
        sb.Append("FilePaths: ");
        sb.Append(FilePaths);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CreateArchive_result : TBase
    {
      private Archive _success;
      private InvalidOperation _error;

      public Archive Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public InvalidOperation Error
      {
        get
        {
          return _error;
        }
        set
        {
          __isset.error = true;
          this._error = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error;
      }

      public CreateArchive_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Archive();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Error = new InvalidOperation();
                Error.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CreateArchive_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.error) {
          if (Error != null) {
            field.Name = "Error";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Error.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("CreateArchive_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Error: ");
        sb.Append(Error== null ? "<null>" : Error.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetUploads_args : TBase
    {

      public GetUploads_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetUploads_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetUploads_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetUploads_result : TBase
    {
      private List<Archive> _success;

      public List<Archive> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetUploads_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Archive>();
                  TList _list12 = iprot.ReadListBegin();
                  for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                  {
                    Archive _elem14 = new Archive();
                    _elem14 = new Archive();
                    _elem14.Read(iprot);
                    Success.Add(_elem14);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetUploads_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Archive _iter15 in Success)
              {
                _iter15.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetUploads_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UploadToCapsule_args : TBase
    {
      private string _ArchiveLocalID;
      private string _CapsuleID;
      private string _title;
      private string _description;

      public string ArchiveLocalID
      {
        get
        {
          return _ArchiveLocalID;
        }
        set
        {
          __isset.ArchiveLocalID = true;
          this._ArchiveLocalID = value;
        }
      }

      public string CapsuleID
      {
        get
        {
          return _CapsuleID;
        }
        set
        {
          __isset.CapsuleID = true;
          this._CapsuleID = value;
        }
      }

      public string Title
      {
        get
        {
          return _title;
        }
        set
        {
          __isset.title = true;
          this._title = value;
        }
      }

      public string Description
      {
        get
        {
          return _description;
        }
        set
        {
          __isset.description = true;
          this._description = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ArchiveLocalID;
        public bool CapsuleID;
        public bool title;
        public bool description;
      }

      public UploadToCapsule_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ArchiveLocalID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                CapsuleID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Title = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Description = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UploadToCapsule_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ArchiveLocalID != null && __isset.ArchiveLocalID) {
          field.Name = "ArchiveLocalID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ArchiveLocalID);
          oprot.WriteFieldEnd();
        }
        if (CapsuleID != null && __isset.CapsuleID) {
          field.Name = "CapsuleID";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CapsuleID);
          oprot.WriteFieldEnd();
        }
        if (Title != null && __isset.title) {
          field.Name = "title";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Title);
          oprot.WriteFieldEnd();
        }
        if (Description != null && __isset.description) {
          field.Name = "description";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Description);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("UploadToCapsule_args(");
        sb.Append("ArchiveLocalID: ");
        sb.Append(ArchiveLocalID);
        sb.Append(",CapsuleID: ");
        sb.Append(CapsuleID);
        sb.Append(",Title: ");
        sb.Append(Title);
        sb.Append(",Description: ");
        sb.Append(Description);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UploadToCapsule_result : TBase
    {
      private InvalidOperation _error;

      public InvalidOperation Error
      {
        get
        {
          return _error;
        }
        set
        {
          __isset.error = true;
          this._error = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool error;
      }

      public UploadToCapsule_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Error = new InvalidOperation();
                Error.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UploadToCapsule_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.error) {
          if (Error != null) {
            field.Name = "Error";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Error.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("UploadToCapsule_result(");
        sb.Append("Error: ");
        sb.Append(Error== null ? "<null>" : Error.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ResumeUpload_args : TBase
    {
      private string _ArchiveLocalID;

      public string ArchiveLocalID
      {
        get
        {
          return _ArchiveLocalID;
        }
        set
        {
          __isset.ArchiveLocalID = true;
          this._ArchiveLocalID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ArchiveLocalID;
      }

      public ResumeUpload_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ArchiveLocalID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ResumeUpload_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ArchiveLocalID != null && __isset.ArchiveLocalID) {
          field.Name = "ArchiveLocalID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ArchiveLocalID);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ResumeUpload_args(");
        sb.Append("ArchiveLocalID: ");
        sb.Append(ArchiveLocalID);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ResumeUpload_result : TBase
    {
      private InvalidOperation _error;

      public InvalidOperation Error
      {
        get
        {
          return _error;
        }
        set
        {
          __isset.error = true;
          this._error = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool error;
      }

      public ResumeUpload_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Error = new InvalidOperation();
                Error.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ResumeUpload_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.error) {
          if (Error != null) {
            field.Name = "Error";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Error.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ResumeUpload_result(");
        sb.Append("Error: ");
        sb.Append(Error== null ? "<null>" : Error.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class QueryArchiveStatus_args : TBase
    {
      private string _ArchiveLocalID;

      public string ArchiveLocalID
      {
        get
        {
          return _ArchiveLocalID;
        }
        set
        {
          __isset.ArchiveLocalID = true;
          this._ArchiveLocalID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ArchiveLocalID;
      }

      public QueryArchiveStatus_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ArchiveLocalID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("QueryArchiveStatus_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ArchiveLocalID != null && __isset.ArchiveLocalID) {
          field.Name = "ArchiveLocalID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ArchiveLocalID);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("QueryArchiveStatus_args(");
        sb.Append("ArchiveLocalID: ");
        sb.Append(ArchiveLocalID);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class QueryArchiveStatus_result : TBase
    {
      private TransferStatus _success;
      private InvalidOperation _error;

      public TransferStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public InvalidOperation Error
      {
        get
        {
          return _error;
        }
        set
        {
          __isset.error = true;
          this._error = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error;
      }

      public QueryArchiveStatus_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TransferStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Error = new InvalidOperation();
                Error.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("QueryArchiveStatus_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.error) {
          if (Error != null) {
            field.Name = "Error";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Error.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("QueryArchiveStatus_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Error: ");
        sb.Append(Error== null ? "<null>" : Error.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PauseUpload_args : TBase
    {
      private string _ArchiveLocalID;

      public string ArchiveLocalID
      {
        get
        {
          return _ArchiveLocalID;
        }
        set
        {
          __isset.ArchiveLocalID = true;
          this._ArchiveLocalID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ArchiveLocalID;
      }

      public PauseUpload_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ArchiveLocalID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("PauseUpload_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ArchiveLocalID != null && __isset.ArchiveLocalID) {
          field.Name = "ArchiveLocalID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ArchiveLocalID);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("PauseUpload_args(");
        sb.Append("ArchiveLocalID: ");
        sb.Append(ArchiveLocalID);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PauseUpload_result : TBase
    {
      private InvalidOperation _error;

      public InvalidOperation Error
      {
        get
        {
          return _error;
        }
        set
        {
          __isset.error = true;
          this._error = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool error;
      }

      public PauseUpload_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Error = new InvalidOperation();
                Error.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("PauseUpload_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.error) {
          if (Error != null) {
            field.Name = "Error";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Error.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("PauseUpload_result(");
        sb.Append("Error: ");
        sb.Append(Error== null ? "<null>" : Error.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CancelUpload_args : TBase
    {
      private string _ArchiveLocalID;

      public string ArchiveLocalID
      {
        get
        {
          return _ArchiveLocalID;
        }
        set
        {
          __isset.ArchiveLocalID = true;
          this._ArchiveLocalID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ArchiveLocalID;
      }

      public CancelUpload_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ArchiveLocalID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CancelUpload_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ArchiveLocalID != null && __isset.ArchiveLocalID) {
          field.Name = "ArchiveLocalID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ArchiveLocalID);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("CancelUpload_args(");
        sb.Append("ArchiveLocalID: ");
        sb.Append(ArchiveLocalID);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CancelUpload_result : TBase
    {
      private InvalidOperation _error;

      public InvalidOperation Error
      {
        get
        {
          return _error;
        }
        set
        {
          __isset.error = true;
          this._error = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool error;
      }

      public CancelUpload_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Error = new InvalidOperation();
                Error.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CancelUpload_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.error) {
          if (Error != null) {
            field.Name = "Error";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Error.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("CancelUpload_result(");
        sb.Append("Error: ");
        sb.Append(Error== null ? "<null>" : Error.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetCertificates_args : TBase
    {

      public GetCertificates_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetCertificates_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetCertificates_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetCertificates_result : TBase
    {
      private List<Certificate> _success;

      public List<Certificate> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetCertificates_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Certificate>();
                  TList _list16 = iprot.ReadListBegin();
                  for( int _i17 = 0; _i17 < _list16.Count; ++_i17)
                  {
                    Certificate _elem18 = new Certificate();
                    _elem18 = new Certificate();
                    _elem18.Read(iprot);
                    Success.Add(_elem18);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetCertificates_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Certificate _iter19 in Success)
              {
                _iter19.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetCertificates_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ExportCertificate_args : TBase
    {
      private string _ArchiveID;
      private CertExportFormat _format;

      public string ArchiveID
      {
        get
        {
          return _ArchiveID;
        }
        set
        {
          __isset.ArchiveID = true;
          this._ArchiveID = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="CertExportFormat"/>
      /// </summary>
      public CertExportFormat Format
      {
        get
        {
          return _format;
        }
        set
        {
          __isset.format = true;
          this._format = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ArchiveID;
        public bool format;
      }

      public ExportCertificate_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ArchiveID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Format = (CertExportFormat)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ExportCertificate_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ArchiveID != null && __isset.ArchiveID) {
          field.Name = "ArchiveID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ArchiveID);
          oprot.WriteFieldEnd();
        }
        if (__isset.format) {
          field.Name = "format";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Format);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ExportCertificate_args(");
        sb.Append("ArchiveID: ");
        sb.Append(ArchiveID);
        sb.Append(",Format: ");
        sb.Append(Format);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ExportCertificate_result : TBase
    {
      private byte[] _success;
      private InvalidOperation _error;

      public byte[] Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public InvalidOperation Error
      {
        get
        {
          return _error;
        }
        set
        {
          __isset.error = true;
          this._error = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error;
      }

      public ExportCertificate_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Error = new InvalidOperation();
                Error.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ExportCertificate_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.error) {
          if (Error != null) {
            field.Name = "Error";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Error.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ExportCertificate_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Error: ");
        sb.Append(Error== null ? "<null>" : Error.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Decrypt_args : TBase
    {
      private string _archivePath;
      private string _key;
      private string _destinationPath;

      public string ArchivePath
      {
        get
        {
          return _archivePath;
        }
        set
        {
          __isset.archivePath = true;
          this._archivePath = value;
        }
      }

      public string Key
      {
        get
        {
          return _key;
        }
        set
        {
          __isset.key = true;
          this._key = value;
        }
      }

      public string DestinationPath
      {
        get
        {
          return _destinationPath;
        }
        set
        {
          __isset.destinationPath = true;
          this._destinationPath = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool archivePath;
        public bool key;
        public bool destinationPath;
      }

      public Decrypt_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ArchivePath = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Key = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                DestinationPath = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Decrypt_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ArchivePath != null && __isset.archivePath) {
          field.Name = "archivePath";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ArchivePath);
          oprot.WriteFieldEnd();
        }
        if (Key != null && __isset.key) {
          field.Name = "key";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Key);
          oprot.WriteFieldEnd();
        }
        if (DestinationPath != null && __isset.destinationPath) {
          field.Name = "destinationPath";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DestinationPath);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Decrypt_args(");
        sb.Append("ArchivePath: ");
        sb.Append(ArchivePath);
        sb.Append(",Key: ");
        sb.Append(Key);
        sb.Append(",DestinationPath: ");
        sb.Append(DestinationPath);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Decrypt_result : TBase
    {
      private InvalidOperation _error;

      public InvalidOperation Error
      {
        get
        {
          return _error;
        }
        set
        {
          __isset.error = true;
          this._error = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool error;
      }

      public Decrypt_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Error = new InvalidOperation();
                Error.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Decrypt_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.error) {
          if (Error != null) {
            field.Name = "Error";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Error.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Decrypt_result(");
        sb.Append("Error: ");
        sb.Append(Error== null ? "<null>" : Error.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetSettings_args : TBase
    {

      public GetSettings_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetSettings_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetSettings_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetSettings_result : TBase
    {
      private Settings _success;

      public Settings Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetSettings_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Settings();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetSettings_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetSettings_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SetSettings_args : TBase
    {
      private Settings _settings;

      public Settings Settings
      {
        get
        {
          return _settings;
        }
        set
        {
          __isset.settings = true;
          this._settings = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool settings;
      }

      public SetSettings_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Settings = new Settings();
                Settings.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetSettings_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Settings != null && __isset.settings) {
          field.Name = "settings";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Settings.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetSettings_args(");
        sb.Append("Settings: ");
        sb.Append(Settings== null ? "<null>" : Settings.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SetSettings_result : TBase
    {

      public SetSettings_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetSettings_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetSettings_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
