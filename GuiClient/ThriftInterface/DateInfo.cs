/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace ThriftInterface
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DateInfo : TBase
  {
    private int _Day;
    private int _Month;
    private int _Year;
    private int _Hour;
    private int _Minutes;
    private int _Seconds;

    public int Day
    {
      get
      {
        return _Day;
      }
      set
      {
        __isset.Day = true;
        this._Day = value;
      }
    }

    public int Month
    {
      get
      {
        return _Month;
      }
      set
      {
        __isset.Month = true;
        this._Month = value;
      }
    }

    public int Year
    {
      get
      {
        return _Year;
      }
      set
      {
        __isset.Year = true;
        this._Year = value;
      }
    }

    public int Hour
    {
      get
      {
        return _Hour;
      }
      set
      {
        __isset.Hour = true;
        this._Hour = value;
      }
    }

    public int Minutes
    {
      get
      {
        return _Minutes;
      }
      set
      {
        __isset.Minutes = true;
        this._Minutes = value;
      }
    }

    public int Seconds
    {
      get
      {
        return _Seconds;
      }
      set
      {
        __isset.Seconds = true;
        this._Seconds = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Day;
      public bool Month;
      public bool Year;
      public bool Hour;
      public bool Minutes;
      public bool Seconds;
    }

    public DateInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Day = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Month = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Year = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Hour = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              Minutes = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              Seconds = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("DateInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.Day) {
        field.Name = "Day";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Day);
        oprot.WriteFieldEnd();
      }
      if (__isset.Month) {
        field.Name = "Month";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Month);
        oprot.WriteFieldEnd();
      }
      if (__isset.Year) {
        field.Name = "Year";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Year);
        oprot.WriteFieldEnd();
      }
      if (__isset.Hour) {
        field.Name = "Hour";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Hour);
        oprot.WriteFieldEnd();
      }
      if (__isset.Minutes) {
        field.Name = "Minutes";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Minutes);
        oprot.WriteFieldEnd();
      }
      if (__isset.Seconds) {
        field.Name = "Seconds";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Seconds);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("DateInfo(");
      sb.Append("Day: ");
      sb.Append(Day);
      sb.Append(",Month: ");
      sb.Append(Month);
      sb.Append(",Year: ");
      sb.Append(Year);
      sb.Append(",Hour: ");
      sb.Append(Hour);
      sb.Append(",Minutes: ");
      sb.Append(Minutes);
      sb.Append(",Seconds: ");
      sb.Append(Seconds);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
